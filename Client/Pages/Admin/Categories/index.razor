@page "/admin/categories"

<main class="admin-area-main">

    <Sidebar />


    <div class="admin-area-content container-fluid bg-white">

        <div class="row g-0">
            <div class="col">
                <h1>Categories</h1>
                <hr />
                <br />
                <br />
                <br />
				@if (InMemoryDatabaseCache.Categories == null)
				{
					<div role="status">
						<Loading />
					</div>
				}
				else
				{					
					<a href="/admin/categories/create" class="btn btn-success shadow me-5 md-f-size-1-5">
						<i class="fas fa-plus"></i> Create category
					</a>
                    <button @onclick="() => InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache()" class="btn btn-primary shhadow md-f-size-1-5">
                        <i class="fas fa-sync"></i> Refresh data
                    </button>
                    <hr />
                    <br />
                    <br />
                    <br />

                    @if (InMemoryDatabaseCache.Categories.Count < 1)
                    {
                        <h1> No categories found. Please Create One.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in InMemoryDatabaseCache.Categories)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@category.Name</p>
                                            </th>
                                            <td class="w-35">
                                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{category.ThumbnailImagePath}")" class="admin-index-thumbnail-image" alt="Category Thumbnail Image">
                                            </td>
                                            <td class="w-35">
                                                <p>@category.Description</p>
                                            </td>
                                            <td class="w-35">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/categories/update/@category.CategoryId" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Update
                                                    </a>

                                                    <br />

                                                    <button class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>
                    }
                }
            </div>
        </div>

     </div>

 </main>

    <Footer />

@implements IDisposable
@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    protected override async Task OnInitializedAsync()
    {
        InMemoryDatabaseCache.OnCategoriesDataChanged += StateHasChanged;

        if (InMemoryDatabaseCache.Categories == null)
        {
            await InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache();
        }
    }

    public void Dispose() => InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemptingToDeleteACategory = false;
    private bool _successfullyDeletedACategory = false;
    private bool _unsucessfullyTriedToDeleteCategory = false;
    private string _reasonUnsuccessfullyTriedToDeleteACategory = null;
    private async void DeleteCategory(Category categoryToDelete)
    {
        if (categoryToDelete.Posts != null && categoryToDelete.Posts.Count != 0)
        {
            string postTitlesThatMustBeDeletedFirst = string.Empty;

            for(int i = 0; i < categoryToDelete.Posts.Count; i++)
            {
                if(i== categoryToDelete.Posts.Count - 1)
                {
                    //Last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Posts[i].Title}\"";
                }
                else if (i == categoryToDelete.Posts.Count - 2)
                {
                    //Second Last iteration
                    postTitlesThatMustBeDeletedFirst += $"\"{categoryToDelete.Posts[i].Title}\" and ";

                }
            }
        }
    }
}