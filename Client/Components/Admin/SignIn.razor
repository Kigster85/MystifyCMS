@using Blazored.LocalStorage;
@using Client.Providers;
@using Microsoft.AspNetCore.Components.Authorization;

<div class="d-flex w-100 min-vh-90 justify-content-center align-items-center fadein">
    <div class="row">
        <div class="col shadow-no-hover p-5">
            @if (_signInSuccessful == true)
            {
                <h3 class="text-center my-3">Signed in Successfully. You should be redirected automatically in a few seconds.</h3>
            }
            else
            {
                <h3 class="text-center fw-bold">You must be signed in to access this page.</h3>

                <EditForm Model="_user" OnValidSubmit="SignInUser">
                    <DataAnnotationsValidator />

                    <div class="form-group my-3">
                        <label for="email">Email Address</label>
                        <InputText @bind-Value="_user.EmailAddress" id="email" class="form-control" />
                        <ValidationMessage For="@(() => _user.EmailAddress)" />
                    </div>

                    <div class="form-group my-3">
                        <label for="password">Password</label>
                        <InputText @bind-Value="_user.Password" id="password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => _user.Password)" />
                    </div>

                    <ValidationSummary />

                    <button type="submit" class="btn btn-primary shadow w-100 md-f-size-1-5">
                        Sign In
                    </button>

                </EditForm>
                <br />
                <a href="/" class="btn btn-secondary shadow w-100 md-f-size-1-5">

                    Return to the Homepage!
                </a>
            }
        </div>
    </div>
</div>
<div class="position-fized bottom-0 end-5 z-index-5">

    @if (_signInSuccessful == true)
    {
        <Toast IsError="false" ToastTitle="Sign In successful"
               ToastBody="Your should be re-directed shortly.."
               ParentMethodToCallOnClickBtnClose="() => _signInSuccessful = false" />
    }

    @if (_signInAttemptFailed == true)
    {
        <Toast IsError="true" ToastTitle="Update failed"
               ToastBody="Sign in failed. Please try again and if the issue persists contact the administrator."
               ParentMethodToCallOnClickBtnClose="() => _signInAttemptFailed = false" />
    }

</div>

@code 
{
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    private bool _signInAttemptFailed = false;
    private bool _signInSuccessful = false;
    private User _user = new();
    private async Task SignInUser()
    {
        var response = await HttpClient.PostAsJsonAsync<User>(APIEndpoints.s_signIn, _user);

        if(response.IsSuccessStatusCode == false)
        {
            _signInAttemptFailed = true;
        }
        else
        {
            string JSONWebToken = await response.Content.ReadAsStringAsync();

            await LocalStorageService.SetItemAsync("bearerToken", JSONWebToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearerToken", JSONWebToken);

            _signInSuccessful = true;

            NavigationManager.NavigateTo("/admin");
        }
    }

}
